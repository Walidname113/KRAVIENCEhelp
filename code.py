import json
import asyncio
import os
import random
from telethon import TelegramClient, events
import time
import sys

print("\033[0;32m–Æ–∑–µ—Ä–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\033[0m")

def input_api_credentials():
    print("\033[95m–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\033[0m")
    api_id = input("\033[95mAPI ID: \033[0m")
    api_hash = input("\033[95mAPI Hash: \033[0m")
    return api_id, api_hash

def save_session_credentials(api_id, api_hash):
    with open('sessioncash.txt', 'w') as file:
        file.write(f"{api_id}\n{api_hash}")

def load_session_credentials():
    try:
        with open('sessioncash.txt', 'r') as file:
            api_id = int(file.readline().strip())
            api_hash = file.readline().strip()
            return api_id, api_hash
    except FileNotFoundError:
        return None, None

api_id, api_hash = load_session_credentials()
if not api_id or not api_hash:
    api_id, api_hash = input_api_credentials()
    save_session_credentials(api_id, api_hash)

client = TelegramClient('ocrestrinatedub.session', api_id, api_hash)

def load_send_status():
    try:
        with open('send_status.txt', 'r') as file:
            return file.readline().strip() == 'on'
    except FileNotFoundError:
        return True

def save_send_status(status):
    with open('send_status.txt', 'w') as file:
        file.write('on' if status else 'off')

def load_chat_ids():
    try:
        with open('chat_ids.txt', 'r') as file:
            return [int(chat_id.strip()) for chat_id in file.readlines()]
    except FileNotFoundError:
        return []

def save_chat_ids(chat_ids):
    with open('chat_ids.txt', 'w') as file:
        for chat_id in chat_ids:
            file.write(f"{chat_id}\n")

def load_words():
    try:
        with open('words.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_words(words):
    with open('words.json', 'w') as file:
        json.dump(words, file)

def load_interval():
    try:
        with open('interval.txt', 'r') as file:
            return int(file.readline().strip())
    except FileNotFoundError:
        return 1200

def save_interval(interval):
    with open('interval.txt', 'w') as file:
        file.write(str(interval))

def save_command_prefix(prefix):
    with open('command_prefix.txt', 'w') as file:
        file.write(prefix)

def load_command_prefix():
    try:
        with open('command_prefix.txt', 'r') as file:
            return file.readline().strip()
    except FileNotFoundError:
        return "."

@client.on(events.NewMessage(outgoing=True))
async def handle_commands(event):
    command_prefix = load_command_prefix()
    command = event.message.message
    if not command.startswith(command_prefix):
        return
    command = command[len(command_prefix):].strip()
    chat_id = event.chat_id
    if command.startswith('onsend'):
        send_enabled = load_send_status()
        if send_enabled:
            await event.message.edit('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞')
        else:
            await event.message.edit('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞')
            save_send_status(True)
    elif command.startswith('offsend'):
        send_enabled = load_send_status()
        if not send_enabled:
            await event.message.edit('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–∞')
        else:
            await event.message.edit('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞')
            save_send_status(False)
    elif command.startswith('updateids'):
        if chat_id < 0:
            chat_ids = load_chat_ids()
            if chat_id not in chat_ids:
                chat_ids.append(chat_id)
                save_chat_ids(chat_ids)
                await event.message.edit('Chat_id —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.')
            else:
                await event.message.edit('–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ.')
        else:
            await event.message.edit('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø.')
    elif command.startswith('setprefix'):
        new_prefix = command[len('setprefix'):].strip()
        if new_prefix and len(new_prefix) == 1 and not new_prefix.isspace() and not new_prefix.isalpha():
            save_command_prefix(new_prefix)
            await event.message.edit(f'–ü—Ä–µ—Ñ–∏–∫—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_prefix}')
        else:
            await event.message.edit('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞')
    elif command.startswith('settime'):
        try:
            new_interval = int(command[len('settime'):].strip())
            if new_interval > 0:
                save_interval(new_interval)
                await event.message.edit(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥')
            else:
                await event.message.edit('–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
        except ValueError:
            await event.message.edit('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞')
    elif command.startswith('except'):
        chat_ids = load_chat_ids()
        if chat_id in chat_ids:
            chat_ids.remove(chat_id)
            save_chat_ids(chat_ids)
            await event.message.edit('–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.')
        else:
            await event.message.edit('–≠—Ç–æ—Ç —á–∞—Ç –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ.')
    elif command.startswith('removedb'):
        try:
            os.remove("chat_ids.txt")
            await event.message.edit("–ë–∞–∑–∞ —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception:
            await event.message.edit("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
            
    elif command.startswith('help'):
        prefix = load_command_prefix()
        message = event.message.edit
        await message("[üé≠]")
        time.sleep(0.1)
        await message("[üé≠]  [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] K üíé [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KV üíé  [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVA üíé  [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVAR üíé  [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVARC üíé E [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVARCE üíé Eb [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVARCEV üíé Eba [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVARCEVIE üíé Ebas [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVARCEVIE üíé Ebash [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVARCEVIE üíé Ebashi [üé≠]")
        time.sleep(0.1)
        await message("[üé≠] KVARCEVIE üíé Ebashit [üé≠]")
        time.sleep(1)
        await message(f"KVARCEVIE HELP\n\nDEDIK\nonsend ‚Äî –≤–∫–ª—é—á–∏—Ç—å –¥–µ–¥–∏–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.\noffsend ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –¥–µ–¥–∏–∫.\n\nDB\nupdateids ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–π–¥–∏ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\nremovedb ‚Äî —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.\nexcept ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å. –ö–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–æ–±–∞–≤–ª—è–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.).\n\nPREFIX\nsetprefix ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã.\n\nKD\nsettime ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã.\n\nOTHER INFO\n–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã ‚Äî {prefix}.\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ userbot'a: @Ocrestrinated")

async def send_random_message(client, words, interval):
    while True:
        await asyncio.sleep(interval)
        if load_send_status():
            chat_ids = load_chat_ids()
            for chat_id in chat_ids:
                try:
                    message = random.choice(words)
                    await client.send_message(chat_id, message)
                except Exception as e:
                    print(f"\033[0;31m–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å ID {chat_id}: {e}\033[0m")

async def main():
    await client.start()
    words = load_words()
    interval = load_interval()
    send_task = asyncio.create_task(send_random_message(client, words, interval))
    await send_task

if __name__ == '__main__':
    asyncio.run(main())